import re 
from src.core.tree import TreeNode
from typing import Optional

quoted_name_field = r'(\"|\')(.*)(?!\2)*\2'
unquoted_name_field = r'[A-Za-z0-9]*'
name_field_capture = fr'({quoted_name_field}|{unquoted_name_field})'
distance_field_capture = r'(?::([0-9]+(?:\.?[0-9]+)))?'
data_field = fr'\s*{name_field_capture}\s*{distance_field_capture}\s*'

data_regex = re.compile(data_field)

opening_regex = re.compile(r'\s*([(])\s*')
closing_regex = re.compile(r'\s*([),])\s*')

name = TreeNode.DEFAULT_NAME
distance = TreeNode.DEFAULT_DISTANCE

def parse_newick_tree(newick_string: str) -> TreeNode:
    return parse_node(newick_string, 0)[0]

class NewickParserError(Exception):
    def __init__(self):
        pass

def parse_parent(newick_string: str, i: int) -> Optional[tuple[TreeNode, int]]:
    i = skip_whitespace(newick_string, i)
    if newick_string[i] == '(':
        i += 1
        
        children, i = parse_children(newick_string, i)
        i = skip_whitespace(newick_string, i)
        assert newick_string[i] == ')'

        i += 1
        name, distance, i = parse_data(newick_string, i)

        return (TreeNode(name=name, distance=distance, children=children), i)
    return None
    
def parse_leaf(newick_string: str, i: int) -> Optional[tuple[TreeNode, int]]:
    name, distance, i = parse_data(newick_string, i)

    i = skip_whitespace(newick_string, i)
    assert newick_string[i] == ')' or newick_string[i] == ',' 

    return (TreeNode(name=name, distance=distance), i)

def parse_node(newick_string: str, i: int) -> Optional[tuple[TreeNode, int]]:
    parent = parse_parent(newick_string, i)
    if parent != None:
        return parent
    return parse_leaf(newick_string, i)
    
def parse_children(newick_string: str, i: int) -> tuple[list[TreeNode], int]:
    children = []
    while True:
        child, i = parse_node(newick_string, i)
        children.append(child)
        if (newick_string[i] == ","):
            i += 1
            continue
        if (newick_string[i] == ")"):
            break

    return (children, i)

def parse_data(newick_string: str, i: int) -> tuple[str, float, int]:
    match = data_regex.match(newick_string, i)

    end = match.end()

    name, quote_char, quoted_name_content, distance = match.groups()

    if quote_char:
        name = quoted_name_content

    distance = float(distance if distance else TreeNode.DEFAULT_DISTANCE)

    return (name, distance, end)

def skip_whitespace(newick_string: str, i: int) -> int:
    while newick_string[i].isspace():
        i += 1
    return i

tree_string = "(((((74:2666.427246,(35:268.352203,192:268.352203):2398.074951):1348.891357,(124:1192.062012,(71:446.337036,(91:199.604218,(130:113.823898,(185:75.130127,(96:34.984104,(97:19.569185,(84:8.422755,136:8.422755):11.146430):15.414925):40.146019):38.693764):85.780334):246.732803):745.725037):2823.256592):24069.277344,((77:766.296204,(28:52.748428,44:52.748428):713.547729):14742.724609,(((52:537.624390,(170:48.483967,171:48.483967):489.140411):2595.648926,(53:1482.572021,(39:1030.751709,(108:18.382275,(62:5.871730,66:5.871730):12.510550):1012.369446):451.820282):1650.701416):7497.824707,(((51:287.504486,160:287.504486):612.628967,(173:699.531982,((26:401.610901,(23:236.465912,(119:125.947807,(69:69.002777,(1:34.589741,161:34.589741):34.413036):56.945030):110.518097):165.144989):184.498825,((114:44.273651,152:44.273651):380.580566,((16:149.027100,(166:54.627048,(33:23.208160,36:23.208160):31.418890):94.400047):159.403900,(50:150.554245,(14:98.974388,(56:57.645290,(103:23.871040,126:23.871040):33.774250):41.329094):51.579861):157.876755):116.423225):161.255493):113.422249):200.601517):5153.485352,((68:2875.782959,((109:537.214233,(46:380.189606,93:380.189606):157.024643):2182.509766,((15:387.950134,140:387.950134):671.461487,(137:584.021606,((85:149.114685,138:149.114685):250.544678,((18:56.508904,(3:7.639120,6:7.639120):48.869785):250.765930,(116:202.100266,(154:115.573532,(139:32.358967,190:32.358967):83.214569):86.526733):105.174568):92.384529):184.362244):475.390015):1660.312378):156.059082):2223.961914,((143:453.289429,(30:352.592957,((55:22.348505,128:22.348505):226.207870,(102:165.143021,((37:35.700062,(61:26.771090,167:26.771090):8.928970):48.391289,(54:32.905254,(32:15.154610,129:15.154610):17.750645):51.186096):81.051666):83.413368):104.036568):100.696487):3164.263428,(((63:13.559680,67:13.559680):41.528389,(70:32.648880,92:32.648880):22.439190):2991.355713,(((19:97.080170,135:97.080170):146.444489,(179:120.749023,(90:51.015442,134:51.015442):69.733582):122.775627):2181.759766,(((47:637.740417,(57:134.260254,(127:51.348019,(156:15.151270,157:15.151270):36.196751):82.912231):503.480164):958.370605,(34:985.464111,(193:597.836731,(76:497.249603,(29:173.872391,(31:53.071915,(142:22.293909,(17:6.686915,60:6.686915):15.606995):30.778006):120.800468):323.377228):100.587097):387.627411):610.646912):508.533386,((75:726.918274,(38:346.644653,45:346.644653):380.273621):1077.718872,(22:1477.041138,(115:1351.344116,((7:199.697998,(117:105.178276,(118:35.951546,155:35.951546):69.226730):94.519722):1024.539917,((106:11.936115,107:11.936115):1123.877319,((125:548.968140,(141:338.737579,(184:160.640350,((8:21.680296,64:21.680296):69.362953,(21:41.404499,159:41.404499):49.638748):69.597107):178.097229):210.230560):430.304688,((9:2.671505,13:2.671505):827.186523,(((186:135.134186,191:135.134186):436.475189,((164:20.072994,181:20.072994):459.736603,((165:28.046190,180:28.046190):379.946381,((11:153.570023,(132:23.354441,158:23.354441):130.215576):207.268143,(65:304.258545,(0:241.340179,((121:77.751938,153:77.751938):111.430580,(20:142.121246,(131:111.775269,((10:8.976675,12:8.976675):69.138954,(27:50.791195,(5:28.709360,133:28.709360):22.081835):27.324434):33.659634):30.345976):47.061264):52.157669):62.918362):56.579609):47.154415):71.817032):91.799767):114.186378,((174:28.096100,175:28.096100):394.999786,((178:86.014763,187:86.014763):205.670715,(120:108.880753,(4:45.287666,(2:30.346895,172:30.346895):14.940770):63.593086):182.804718):131.410416):262.699860):144.062317):149.414780):156.540558):88.424477):127.106201):125.697121):327.595917):300.007324):320.639923):621.159363):571.109070):1482.192139):953.873840):4577.479004):4877.922852):12575.575195):26764.947266,((150:4178.530273,((163:2022.106445,(49:1605.554810,162:1605.554810):416.551636):1011.452515,(48:2179.608398,((189:1554.077148,(188:1107.834717,(87:772.881775,(59:592.178772,86:592.178772):180.703033):334.952911):446.242462):386.887024,(58:1302.141846,151:1302.141846):638.822388):238.644211):853.950562):1144.971313):13678.662109,((112:11290.476562,113:11290.476562):3055.793701,(104:9718.043945,105:9718.043945):4628.226562):3510.921631):36992.351562):64182.757812,(((111:9475.508789,(110:2917.164307,((182:370.800262,(88:248.440918,(176:178.483047,(89:56.417309,177:56.417309):122.065727):69.957886):122.359352):471.727112,((123:170.020004,(146:65.170341,169:65.170341):104.849655):232.323868,(100:175.157898,(81:62.079632,95:62.079632):113.078270):227.185959):440.183533):2074.636963):6558.344727):4535.489258,((98:1968.259888,148:1968.259888):8196.063477,((43:3884.023438,(((72:129.706406,149:129.706406):152.410110,(78:107.953072,79:107.953072):174.163437):379.707214,((122:134.183304,(147:39.488110,168:39.488110):94.695198):236.796280,(101:111.484222,(80:57.698006,94:57.698006):53.786221):259.495361):290.844116):3222.199707):2620.417480,(42:3444.237305,99:3444.237305):3060.203369):3659.882080):3846.675537):13190.405273,((145:772.281494,(183:430.147095,(73:219.011002,144:219.011002):211.136093):342.134399):14939.209961,((25:368.690521,(24:335.034485,41:335.034485):33.656040):5897.664551,(83:1509.310181,(40:941.738342,82:941.738342):567.571838):4757.044922):9445.136719):11489.913086):91830.898438)"
# tree_string = "(74:2666.427246,(35:268.352203,192:268.352203):2398.074951)"
tree = parse_newick_tree(tree_string)
result_newick = tree.to_newick()

i = 0
for char1, char2 in zip(tree_string, result_newick):
    assert char1 == char2, f"Difference {i}: {tree_string[:i+1]} <-> {result_newick[:i+1]}"
    i += 1
